
model{
## State model
for (i in 1:N){ # N is the number of plots
  for (j in 1:Y){ # number of years
    C.S[i,j] <- z[i,j] * c.Pos[i,j] # cover including zeros
    z[i,j] ~ dbern(psi[i,j]) ## true PA state of a plot within a year depends on occupancy probability psi
    psi[i,j] ~ dunif(0,1)
    c.Pos[i,j] ~ dbeta(a.C[i,j], b.C[i,j]) T(1e-16,0.9999999999999999)
    a.C[i,j] <- mu.C * tau.C
    b.C[i,j] <- (1 - mu.C) * tau.C
    } # end of years loop
} # end of plot loop

## Derived values from state model above (average value of c.Pos, psi and C.S per year)
for (j in 1:Y){ # number of years
    cPosAn[j] <- mean(c.Pos[,j]) # mean across C.Pos per year, etc.
    psiAn[j] <- mean(psi[,j])
    cSAn[j] <- mean(C.S[,j])
    annOcc[j] <- (sum(z[,j]))/N # avg occupancy proportion
}

## Plot positive covers
for(k in 1:n.Plot.pos){ 
    cpos.Cens[k] ~ dinterval(cpos.Latent[k], lims[k,])
    cpos.Latent[k] ~ dbeta(a.C[plot[k], year[k]], b.C[plot[k], year[k]]) T(1e-16,0.9999999999999999) # recorded cover when present follows beta distribution
}

## Observation model for all plot visits ([within-year] detection within plots)
for (a in 1:V2){
    x[a] ~ dbern(py[a]) # detectability influences detection
    py[a] <- z[plotZ[a], yearZ[a]] * p.dec[a] # true state x detectability
    p.dec[a] <- min(max(1e-16, p.Dec[a]), 0.9999999999999999) # trick to stop numerical problems (note that this *could* influence covars in detectability regression) -- important?
    logit(p.Dec[a]) <- gamma0 + gamma1 * C.S[plotZ[a], yearZ[a]] ## + covars on detectability, influenced by estimated covers (before detection filter)
    #logit(p.Dec[a]) <- gamma0 + gamma1 * yOrig[a] ## + covars on detectability, influenced by original simulated covers (before detection)
    #yOrig[a] ~ dunif(0,10) # Doesn't seem too make much difference to results
}


## Priors!
mean.p ~ dunif(0.01,0.99) # broad intercept on prob scale (but not going quite to +/- infinity!)
gamma0 <- logit(mean.p) # transformed # note that this requires tweak to initial values
gamma1 ~ dunif(-8,8) # broad uniform on logit scale (but not stupidly broad)
#gamma1 ~ dt(0, 0.04, 1)
#gamma1 ~ dt(0, 0.01, 1)
#gamma0 ~ dnorm(0, 1)
#gamma1 ~ dnorm(0, 1)
mu.C ~ dunif(0, 1)
tau.C ~ dt(0, 0.01, 1)T(0,)

} # END MODEL

